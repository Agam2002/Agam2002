module sync_fifo(full,data,wr_en,rst_n,clk,rd_en,data_o,empty_o);


input clk,rst_n,wr_en,rd_en;
output full,empty_o;
input [7:0] data;
output reg [7:0] data_o;

parameter  depth = 8;

reg [7:0] mem [0:depth-1];

reg [2:0] wr_ptr;
reg [2:0] rd_ptr;
reg [3:0] count;


assign full=(count==depth);
assign empty_o=(count==0);

always @(posedge clk or negedge rst_n)
begin
if (!rst_n) begin
    wr_ptr<=0;
end    

else begin
 if(wr_en==1)
begin
  mem[wr_ptr]<=data;
  wr_ptr<=wr_ptr+1;

end


end
end




always @(posedge clk or negedge rst_n)
begin
if (!rst_n) begin
    rd_ptr<=0;
end    

else begin
 if(rd_en==1)
begin
data_o=mem[rd_ptr];
  rd_ptr<=rd_ptr+1;

end


end
end

always @(posedge clk or negedge rst_n) 
begin

if(!rst_n) begin
  count<=4'd0;
end

else
begin
  case({wr_en,rd_en})
  2'b10: count<=count+1;
  2'b01:count<=count-1;

  default:count<=count;

  endcase
end



end



endmodule
